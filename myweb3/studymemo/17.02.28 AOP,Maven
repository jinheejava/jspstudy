17.02.28

* AOP
 : 개발 방법론 중의 하나, 관점 지향 프로그래밍.
 객체 지향 프로그래밍에서의 객체의 지향 내부에 기능을 관점적으로 분류시켜 코드를 작성하는 방법.
 OOP(객체 지향 프로그래밍)를 보완하기 위해서 나온 개발 방법론.
 
	       인터셉터(갈취) 의 개념
 
	A ----(AOP)----> B
	 <----     -----
   
 내가 수행하고 싶은 핵심 기능의 선처리/후처리로 수행하고자 하는 기능을 AOP로 구현하면 된다.
 
 1. 기능을 각 각 구별해놓고 핵심/관점 기능을 분류한다.
 2. 여기서 핵심 기능을 짤 때 관점 기능을 호출해야하는 시점을 알아야하는 문제점이 생김. (선처리/후처리인지)
 3. 그런데 이를! AOP 프레임워크 가 알아서 처리해주게 되어있어 신경쓰지 않아도 된다.
 
 # AOP 용어
  - joinpoint : 핵심 업무를 실행하기 전 관점을 호출해야하는 시점
  - pointcut : 같은 기능의 관점 기능을 호출하는 시점을 모아놓은 것
  - advice : pointcut에 의해 실행되는 관점 로직
  - advisor : pointcut + advice
  - target : advisor에 호출되는 기능
  - weaving : ...?
  - Aspect : ...?
  
  (카페 ApplicationContext 인터페이스)
  # ApplicationContext?
  1) org.springframework.context 패키지에 존재
  2) BeanFactory 인터페이스의 서브 인터페이스
  3) 여러개의 편리한 기능이 추가되었다.
   - 메세지의 국제화
   - Resource로의 엑세스 수단 간편화
   - 이벤트 처리
   - 복수 context 로드 등..
  
  → 설정파일이 여러개더라도 한번에 가져올 수 있음!
  
  4) 빈 팩토리 생성 코드의 변화
  어제 >
	Resource resource = new ClassPathResource("applicationContext.xml");
	XmlBeanFactory factory = new XmlBeanFactory(resource);
	
	→ 설정 파일을 불러오고 이를 이용해 객체를 만들었다
	
	====================================================================
  변경 방법 >
  
  1.
	ApplicationContext factory = new FileSystemXmlApplicationContext("applicationContext.xml");
	
  2.
	String[] configLacations = new String[]{"applicationContext.xml"};
	ApplicationContext factory = new ClassPathXmlApplicationContext(configLacations);
	
	첫번째 방법은 경로를 모두 알아야 사용 가능.
	두번째 방법은 src부터 찾아줌.
	→ 두번째 방법을 추천

 ---------------------------------------------------------------------------------------------- 
 
* Maven
 : 빌드 관리 툴(프로그램) -> 라이브러리 버전 관리
 
 : 중앙저장소, 각 각 업체에서 제공하는 라이브러리가 저장되어 있다.
  라이브러리가 필요할 때 각 사이트에 들어가서 다운받아도 되지만 Maven 중앙저장소에서 다운 가능
  맨 처음 접속해서 정보를 가져올 때만 인터넷 연결이 되야하고 그 후엔 인터넷이 연결되지 않아도 사용 가능.
  
  # 설정 방법
  Package Exploere → 마우스 오른쪽 new → other → Maven(Maven Project  → 
	Group Id : 프로젝트'들'을 관리
	Artifact Id : 프로젝트 이름
	Package : jar - Maven 기반의 자바 프로젝트
			  war - Maven 기반의 웹 자바 프로젝트	 	→	 finish  → 
  Maven 중앙저장소에 연결(인터넷 필요) → 완료 후 엑박이 뜨는데 package에서 마우스 오른쪽 → 
  Java EE Tools → Generate Development Discriptor Stub
  
  # 구조
	src/main
	src/test : 배포할 때 포함되지 않음
	
	src/main/java : 우리가 사용했던 src 폴더
	src > main > webapp : 우리가 사용했던 webContent 폴더
	
  # 라이브러리 설정
   mvnrepository.com 접속 → 필요한 라이브러리 검색 다운
   
   검색 → 다운로드 수가 가장 많은 것(사용자가 제일 많은 것이 안정적) → 화면 중간의 dependency 복사 →
   패키지 pom.xml에 <dependencies> </dependencies> 태그 안에 붙여넣기
   
   pom.xml = 프로그램이 구동 될 때 필요한 라이브러리들의 목록
   ** Maven에서 가장 중요한 파일 ** 웬만해선 신입들에겐 제공해주지 않음.
   
 ----------------------------------------------------------------------------------------------
 
 **스프링 MVC 흐름도**

	DispatcherServlet : 클라이언트의 요청을 전달받는다. 컨트롤러에게 클라이언트의 요청을 전달하고,
		컨트롤러가 리턴한 결과값을 View에 전달하여 알맞은 응답을 생성하도록 한다.
		(우리가 예전에 만들었던 yong컨트롤러)
	HandlerMapping : 클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지 결정한다.
	컨트롤러 : 클라이언트의 요청을 처리한 뒤, 그 결과를 DispatcherServlet에 알려준다.
		스트럿츠의 Action과 동일한 역할을 수행한다.
	ModelAndView : 컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담는다.
		우리가 예전에 만들었던 ↓
						req.setAttribute('','');
						return 'URL';
						+ 뷰			-> request
	ViewResolver : 컨트롤러의 처리 결과를 생성할 뷰를 결정 : 반환타입(jsp냐 파일다운로드냐) 결정
	뷰 View : 컨트롤러의 처리 결과 화면을 생성한다 JSP

	사용자 요청 -> 디스패처서블릿 - > 핸들러맵핑(어떤 클래스가 요청을 처리할지 결정) -> 컨트롤러 
	-> 디스패쳐서블릿 -> 뷰리저버 -> 뷰

 ----------------------------------------------------------------------------------------------
 
 * 컨트롤러
 사용자가 어떤 명령어로 접속할 지 서블릿 web.xml에 등록
 properties 설정파일 → [서블릿이름-servlet] 형태로 이름을 지정해주어야 함.
 
 webContent 안에 jsp 파일을 만들면 사용자가 이를 조작해서 접속이 가능하지만
 WEB-INF 폴더는 설정 파일들이 모아져 있는 파일로 사용자들의 접근이 불가능하기 때문에 보안성이 증가된다.
 앞으로 WEB-INF에 jsp 파일 생성!

 ----------------------------------------------------------------------------------------------
	파일 : sday03, myweb3 
 